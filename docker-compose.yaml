services:
  db:
    build:
      context: .
      dockerfile: ./docker/db/Dockerfile
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: n8n
      POSTGRES_NON_ROOT_USER: ${POSTGRES_NON_ROOT_USER}
      POSTGRES_NON_ROOT_PASSWORD: ${POSTGRES_NON_ROOT_PASSWORD}
    volumes:
      - db_storage:/var/lib/postgresql/data
    expose:
      - 5432
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d n8n']
      interval: 5s
      timeout: 5s
      retries: 10

  qdrant:
    image: qdrant/qdrant:latest
    restart: unless-stopped
    environment:
      - SERVICE_FQDN_QDRANT_6333
      - QDRANT__SERVICE__API_KEY=${QDRANT_API_KEY}
    ports:
      - ${PORT_QDRANT}:6333
    volumes:
      - qdrant_storage:/qdrant
    healthcheck:
      test:
        - CMD-SHELL
        - bash -c ':> /dev/tcp/127.0.0.1/6333' || exit 1
      interval: 5s
      timeout: 5s
      retries: 3

  memory:
    image: redis:7-alpine
    restart: unless-stopped
    expose:
      - 6379
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 20s
      timeout: 10s
      retries: 5
      start_period: 10s

  n8n:
    image: docker.n8n.io/n8nio/n8n
    restart: unless-stopped
    environment:
      N8N_HOST: ${HOST}
      N8N_PORT: 5678
      WEBHOOK_URL: https://${HOST}/
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: db
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: n8n
      DB_POSTGRESDB_USER: ${POSTGRES_NON_ROOT_USER}
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_NON_ROOT_PASSWORD}
      GENERIC_TIMEZONE: ${TIMEZONE}
      NODE_FUNCTION_ALLOW_BUILTIN: crypto
      NODE_FUNCTION_ALLOW_EXTERNAL: moment,lodash
      N8N_COMMUNITY_PACKAGES_ALLOW_TOOL_USAGE: 'true'
    ports:
      - ${PORT}:5678
    links:
      - db
      - qdrant
    volumes:
      - n8n_storage:/home/node/.n8n
    depends_on:
      db:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      memory:
        condition: service_healthy

  pgadmin:
    image: dpage/pgadmin4:9
    restart: unless-stopped
    ports:
      - "${PORT_PGADMIN}:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_USER}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    volumes:
      - pgadmin_storage:/var/lib/pgadmin

  waha:
    image: devlikeapro/waha:latest
    restart: unless-stopped
    environment:
      WHATSAPP_DEFAULT_ENGINE: NOWEB
      WHATSAPP_HOOK_EVENTS: message
      WHATSAPP_HOOK_URL: http://n8n:5678/webhook/${WAHA_HOOK_KEY}/waha
    volumes:
      - waha_storage:/tmp
    expose:
      - 80
    healthcheck:
      test: curl --fail -s http://localhost:3000 || exit 1
      interval: 20s
      timeout: 10s
      start_period: 10s
      retries: 5

  nginx:
    build:
      context: .
      dockerfile: ./docker/nginx/Dockerfile
    restart: unless-stopped
    ports:
      - ${PORT_WAHA}:80
    depends_on:
      waha:
        condition: service_healthy
    environment:
      - FORWARD_HOST=waha
      - FORWARD_PORT=3000
      - BASIC_USERNAME=${WAHA_USERNAME}
      - BASIC_PASSWORD=${WAHA_PASSWORD}

  backup:
    build:
      context: .
      dockerfile: ./docker/backup/Dockerfile
    restart: no
    depends_on:
      db:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    volumes:
      - backup_storage:/backup
      - n8n_storage:/n8n
      - qdrant_storage:/qdrant
    command: >
      sh -c 'set -ex &&
        export BACKUP_FILE=$$(date +"%Y_%m_%d_%H_%M_%S")_io_n8n &&
        mkdir -p /backup/$$BACKUP_FILE && cd /backup/$$BACKUP_FILE &&
        export PGHOST=db PGUSER=${POSTGRES_USER} PGPASSWORD=${POSTGRES_PASSWORD} &&
        pg_dump --file n8n.dump --format=p --encoding=UTF8 --no-owner --no-privileges --clean --if-exists --verbose n8n &&
        curl -X POST http://qdrant:6333/snapshots -H "Content-Type: application/json" -H "api-key: ${QDRANT_API_KEY}" -d "{\"snapshot_name\": \"io\", \"wait\": true}" &&
        cd /backup && cp -r /n8n /backup/$$BACKUP_FILE/ && cp -r /qdrant/snapshots /backup/$$BACKUP_FILE/ && \
        tar -zcf $$BACKUP_FILE.tar.gz ./$$BACKUP_FILE &&
        rm -rf /backup/$$BACKUP_FILE'
    profiles:
      - cli

  sanitize:
    image: postgres:17
    restart: no
    depends_on:
      db:
        condition: service_healthy
    command: >
      sh -c  'set -ex &&
        export PGHOST=db PGUSER=${POSTGRES_USER} PGPASSWORD=${POSTGRES_PASSWORD} &&
        vacuumdb --analyze n8n && reindexdb --all'
    profiles:
      - cli

volumes:
  db_storage:
    name: ${VOLUME_DB}
    external: true

  qdrant_storage:
    name: ${VOLUME_QDRANT}
    external: true

  n8n_storage:
    name: ${VOLUME_N8N}
    external: true

  pgadmin_storage:
    name: ${VOLUME_PGADMIN}
    external: true

  waha_storage:
    name: ${VOLUME_WAHA}
    external: true

  backup_storage:
    name: ${VOLUME_BACKUP}
    external: true
